# This playbook can be used to create a backup of the files and database of a website

- name: Grant remote access to machines from which backups are being taken
  hosts: all
  gather_facts: false
  tasks:
    - name: Import variables
      include_vars:
        file: "{{inventory_hostname}}.yml"
    - name: Ensure backup server has credentials to the machine from which the backups are being taken
      authorized_key:
        user: "{{ansible_user}}"
        state: present
        key: "{{ lookup('file', '/home/ubuntu/.ssh/id_rsa.pub') }}"

- name: Backup site
  hosts: all

  tasks:
    - name: Import variables
      include_vars:
        file: "{{inventory_hostname}}.yml"

    - name: Ensure local backup folder does not exist
      file:
        path: /home/ben/flextalk-ansible-backups
        state: absent
      delegate_to: localhost

    - name: Ensure ansible backup folders does not exist
      file:
        path: /home/{{ansible_user_id}}/{{item}}
        state: absent
      with_items:
        - ansible-backup
        - ansible-backup-archives

    - name: Ensure ansible backup folders exist
      file:
        path: /home/{{ansible_user_id}}/{{item}}
        state: directory
      with_items:
        - ansible-backup
        - ansible-backup-archives

    - name: Copy website files to ansible backup folder
      command: cp -r /home/{{ansible_user_id}}/{{inventory_hostname}} /home/{{ansible_user_id}}/ansible-backup/files
      ignore_errors: yes

    - name: Dump database
      shell: |
        set timeout -1
        spawn mysqldump {{mysql_database}} --host={{mysql_host}} --user={{mysql_user}} -p --result-file=/home/{{ansible_user_id}}/ansible-backup/database.sql
        expect "Enter password: "
        send "{{mysql_pass}}\n"
        expect "$ "
        exit 0
      args:
        executable: /usr/bin/expect
    
    - name: Create single file archive of backup
      archive:
        path: /home/{{ansible_user_id}}/ansible-backup/*
        dest: /home/{{ansible_user_id}}/ansible-backup-archives/archive.tar.gz
    
    - name: Copy archive back here locally
      fetch:
        src: /home/{{ansible_user_id}}/ansible-backup-archives/archive.tar.gz
        dest: /home/ubuntu/flextalk-ansible-backups
    
    - name: Ensure boto is installed
      pip:
        name: ['botocore', 'boto', 'boto3']
      become: yes
      delegate_to: localhost

    - name: Upload archive to the cloud
      aws_s3:
        bucket: flextalk-backups
        object: /{{inventory_hostname}}/{{inventory_hostname}}-{{ansible_date_time.date}}.tar.gz
        src: /home/ubuntu/flextalk-ansible-backups/{{inventory_hostname}}/home/{{ansible_user_id}}/ansible-backup-archives/archive.tar.gz
        mode: put
      delegate_to: localhost
